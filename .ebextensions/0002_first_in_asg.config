commands:
  00_install_boto: 
    command: easy_install boto
    
files:
  '/opt/matomo-eb/first-in-asg':
    mode: '000755'
    content: |
      #!/usr/bin/env python

      import boto.ec2
      import requests
      import sys
      import os


      def check_if_first():

        current_region = get_running_region()
        current_instance_id = get_running_instance_id()

        sys.stderr.write("Current Region: {}\n".format(current_region))
        sys.stderr.write("Current Instance: {}\n".format(current_instance_id))

        conn = boto.ec2.connect_to_region(current_region)

        # figure out tags for current instance and pick out the ASG name
        self_filters = {
            'resource-type': 'instance',
            'resource-id': current_instance_id}

        tags = conn.get_all_tags(filters=self_filters)
        asg_tags = [
            tag
            for tag in tags if tag.name == u'aws:autoscaling:groupName']

        # if no ASG tag, then don't say we're first
        if len(asg_tags) == 0:
            sys.stderr.write("I'm not in an ASG.\n")
            sys.exit(1)

        asg_name = asg_tags[0].value

        # look through all running instances in the asg
        all_running_instances = []

        filters = {
            'tag:aws:autoscaling:groupName': asg_name,
            'instance-state-name': 'running'}

        reservations = conn.get_all_instances(filters=filters)

        instances = [i for r in reservations for i in r.instances]

        for i in instances:

            sys.stderr.write(" Found Instance: {}\n".format(i.id))

            all_running_instances.append(i.id)

        all_running_instances.sort()

        # if we're first, then exit cleanly
        if all_running_instances[0] == current_instance_id:
            sys.stderr.write("I'm first\n")
            sys.exit(0)
        else:
            sys.stderr.write("I'm not first\n")
            sys.exit(1)


      def get_running_region():
        r = requests.get(
            "http://169.254.169.254/latest/meta-data/placement/availability-zone")
        return r.content[:-1]


      def get_running_instance_id():
        r = requests.get("http://169.254.169.254/latest/meta-data/instance-id")
        return r.content


      check_if_first()
